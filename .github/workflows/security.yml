name: 🔒 Security Analysis & Dependency Management

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: '--max-old-space-size=4096'
  FORCE_COLOR: true

jobs:
  # 🔍 Dependency Security Scanning
  dependency-security:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🚨 Run npm audit (Critical & High)
        run: |
          echo "🔍 Scanning for critical and high severity vulnerabilities..."
          npm audit --audit-level=high --json > audit-results.json || true
          
          # Parse and display results
          node -e "
            const fs = require('fs');
            const data = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
            
            console.log('📊 Security Audit Results:');
            console.log('Total vulnerabilities:', data.metadata?.vulnerabilities?.total || 0);
            console.log('Critical:', data.metadata?.vulnerabilities?.critical || 0);
            console.log('High:', data.metadata?.vulnerabilities?.high || 0);
            console.log('Moderate:', data.metadata?.vulnerabilities?.moderate || 0);
            
            const critical = data.metadata?.vulnerabilities?.critical || 0;
            const high = data.metadata?.vulnerabilities?.high || 0;
            
            if (critical > 0 || high > 0) {
              console.error('❌ Critical or high severity vulnerabilities found!');
              process.exit(1);
            } else {
              console.log('✅ No critical or high severity vulnerabilities detected');
            }
          "

      - name: 📋 License compliance check
        run: |
          echo "📋 Checking license compliance..."
          npx license-checker --onlyAllow "MIT;ISC;Apache-2.0;BSD-2-Clause;BSD-3-Clause;Unlicense;CC0-1.0" --summary

      - name: 💬 Security summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const auditData = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              const vulns = auditData.metadata?.vulnerabilities;
              
              const comment = `## 🔒 Security Analysis Results
              
              **Dependency Vulnerabilities:**
              - Critical: ${vulns?.critical || 0}
              - High: ${vulns?.high || 0} 
              - Moderate: ${vulns?.moderate || 0}
              - Low: ${vulns?.low || 0}
              
              **Status:** ${(vulns?.critical || 0) + (vulns?.high || 0) > 0 ? '❌ Action Required' : '✅ Secure'}
              
              **License Compliance:** ✅ All dependencies use approved licenses
              
              ---
              *Generated by Security Analysis workflow*`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not create security comment:', error.message);
            }

  # 🛡️ Container Security Scanning
  container-security:
    name: 🛡️ Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name != 'schedule'
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Build Docker image for security scanning
        run: |
          docker build -t qrcode-mcp-security:latest .
          echo "✅ Docker image built for security analysis"

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'qrcode-mcp-security:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📊 Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # 🔄 Dependency Updates
  dependency-updates:
    name: 🔄 Automated Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    timeout-minutes: 10
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: ⚡ Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 🔄 Apply security fixes
        run: |
          echo "🔧 Applying security fixes..."
          npm audit fix --audit-level=moderate || true
          
          if git diff --name-only | grep -q "package-lock.json"; then
            echo "security-updates=true" >> $GITHUB_ENV
          else
            echo "security-updates=false" >> $GITHUB_ENV
          fi

  # 📊 Security Summary
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, container-security]
    if: always()
    timeout-minutes: 5
    steps:
      - name: 📊 Generate security report
        run: |
          echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-security.result }}" == "success" ]]; then
            echo "✅ **Dependency Security**: No critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Dependency Security**: Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.container-security.result }}" == "success" ]]; then
            echo "✅ **Container Security**: Docker image secure" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.container-security.result }}" == "skipped" ]]; then
            echo "⏭️ **Container Security**: Skipped (scheduled run)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Container Security**: Vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Measures" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency Scanning**: npm audit analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Scanning**: Trivy vulnerability scanner" >> $GITHUB_STEP_SUMMARY
          echo "- **License Compliance**: Approved licenses only" >> $GITHUB_STEP_SUMMARY
          echo "- **Automated Updates**: Daily security patches" >> $GITHUB_STEP_SUMMARY